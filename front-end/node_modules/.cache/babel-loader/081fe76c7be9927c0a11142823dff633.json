{"ast":null,"code":"var _jsxFileName = \"/Users/RaymondChu/spotify-playlist-generator/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handlePlaylistName = this.handlePlaylistName.bind(this);\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      tracks: [],\n      trackuri: [],\n      playlistName: '',\n      nowPlaying: {\n        name: 'Not checked',\n        image: ''\n      },\n      playlistid: ''\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  componentDidCatch() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      });\n      console.log(response);\n    }).catch(err => {\n      console.log(err);\n\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        });\n      } else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        });\n      }\n    });\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    });\n  }\n\n  handleSearchArtistId() {\n    this.setState({\n      tracks: []\n    });\n    let artists = this.state.artists.split(',');\n    artists.map(artistName => spotifyWebApi.searchArtists(artistName).then(res => {\n      let artistId = res.artists.items[0].id;\n      spotifyWebApi.getArtistTopTracks(artistId, \"CA\", {\n        limit: 15\n      }).then(res => {\n        for (let i = 0; i < res.tracks.length; i++) {\n          this.setState(state => {\n            const tracks = state.tracks.concat(res.tracks[i]);\n            const trackuri = state.trackuri.concat(res.tracks[i].uri);\n            return {\n              tracks,\n              trackuri\n            };\n          });\n        }\n      });\n    }));\n    console.log(this.state.tracks);\n    console.log(this.state.trackuri);\n  }\n\n  skipNext() {\n    spotifyWebApi.skipToNext({\n      device_id: 'c5b357fd21de91e21f8531afbfcc16ea058de3b8'\n    }).then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState().then(res => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        });\n      });\n    });\n  }\n\n  skipPrev() {\n    spotifyWebApi.skipToPrevious({\n      device_id: 'c5b357fd21de91e21f8531afbfcc16ea058de3b8'\n    }).then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState().then(res => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        });\n      });\n    });\n  }\n\n  handlePlaylistName(event) {\n    this.setState({\n      playlistName: event.target.value\n    });\n  }\n\n  handleCreatePlaylist() {\n    spotifyWebApi.createPlaylist('12168442740', {\n      name: this.state.playlistName\n    }).then(res => {\n      this.setState({\n        playlistid: res.id\n      });\n    });\n  }\n\n  handleAddTracks() {\n    spotifyWebApi.addTracksToPlaylist(this.state.playlistid, this.state.trackuri);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, \"Spotify Playlist Generator\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, \"Log into Spotify\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, \"Now playing: \", this.state.nowPlaying.name), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nowPlaying.image,\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter artists name\",\n      value: this.state.artists,\n      onChange: this.handleSearchChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.handleSearchArtistId(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, \"Generate Playlist\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.skipPrev(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, \"Prev song\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.skipNext(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, \"Next song\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, this.state.tracks.map(track => /*#__PURE__*/React.createElement(\"li\", {\n      key: track.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, track.name)), this.state.tracks.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Playlist Name\",\n      value: this.state.playlistName,\n      onChange: this.handlePlaylistName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleCreatePlaylist(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }\n    }, \"Create playlist\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleAddTracks(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }\n    }, \"Add tracks to playlist\")) : \"\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/spotify-playlist-generator/src/App.js"],"names":["React","Spotify","spotifyWebApi","App","Component","constructor","props","params","getHashParams","handleSearchChange","bind","handlePlaylistName","state","loggedIn","access_token","artists","tracks","trackuri","playlistName","nowPlaying","name","image","playlistid","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidCatch","getMyCurrentPlaybackState","then","response","setState","item","album","images","url","console","log","catch","err","event","target","value","handleSearchArtistId","split","map","artistName","searchArtists","res","artistId","items","id","getArtistTopTracks","limit","i","length","concat","uri","skipNext","skipToNext","device_id","skipPrev","skipToPrevious","handleCreatePlaylist","createPlaylist","handleAddTracks","addTracksToPlaylist","render","width","track"],"mappings":"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","sourcesContent":["import React from 'react'; \nimport logo from './logo.svg';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component { \n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handlePlaylistName = this.handlePlaylistName.bind(this);\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      tracks: [],\n      trackuri: [],\n      playlistName: '',\n      nowPlaying: {\n        name: 'Not checked',\n        image: '',\n      },\n      playlistid: '',\n    }\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  componentDidCatch() {\n    spotifyWebApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      })\n      console.log(response)\n    })\n\n    .catch((err) => {\n      console.log(err)\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        })\n      }\n\n      else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        })\n      }\n    })\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    })\n  }\n\n  handleSearchArtistId() {\n    this.setState({tracks: []})\n    let artists = this.state.artists.split(',');\n    artists.map(artistName => (\n      spotifyWebApi.searchArtists(artistName) \n      .then((res) => {\n        let artistId = res.artists.items[0].id\n        spotifyWebApi.getArtistTopTracks(artistId, \"CA\", { limit: 15 })\n        .then((res) => {\n          for (let i = 0; i < res.tracks.length; i++) {\n            this.setState(state => {\n              const tracks = state.tracks.concat(res.tracks[i])\n              const trackuri = state.trackuri.concat(res.tracks[i].uri)\n              return {tracks, trackuri}\n            })\n          }\n        })\n      }) \n    ))\n    console.log(this.state.tracks)\n    console.log(this.state.trackuri)\n  }\n\n  skipNext() {\n    spotifyWebApi.skipToNext({device_id: 'c5b357fd21de91e21f8531afbfcc16ea058de3b8', })\n    .then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState()\n      .then((res) => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        })\n      })\n    })\n  }\n\n  skipPrev() {\n    spotifyWebApi.skipToPrevious({device_id: 'c5b357fd21de91e21f8531afbfcc16ea058de3b8', })\n    .then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState()\n      .then((res) => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        })\n      })\n    })\n  }\n\n  handlePlaylistName(event) {\n    this.setState({\n      playlistName: event.target.value\n    })\n  }\n\n  handleCreatePlaylist() {\n    spotifyWebApi.createPlaylist('12168442740', {name: this.state.playlistName})\n    .then((res) => {\n      this.setState({\n        playlistid: res.id\n      })\n    })\n  }\n\n  handleAddTracks() {\n    spotifyWebApi.addTracksToPlaylist(this.state.playlistid, this.state.trackuri)\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Spotify Playlist Generator</h1>\n        <a href=\"http://localhost:8888\">\n          <button>\n            Log into Spotify\n          </button>\n        </a>\n        <div>\n          Now playing: {this.state.nowPlaying.name}\n        </div>\n        <div>\n          <img src={this.state.nowPlaying.image} style={{width: 100}} />\n        </div>\n        <br/>\n        <form>\n          <input \n            type=\"text\" \n            placeholder=\"Enter artists name\" \n            value={this.state.artists} \n            onChange={this.handleSearchChange}\n          />\n          <button type=\"button\" onClick={() => this.handleSearchArtistId()}>\n            Generate Playlist\n          </button>\n        </form>\n        <button onClick={() => this.skipPrev()}>\n          Prev song\n        </button>\n        <button onClick={() => this.skipNext()}>\n          Next song\n        </button>\n        <div>\n          {this.state.tracks.map(track => (\n            <li key={track.id}>{track.name}</li>\n          ))}\n          { this.state.tracks.length > 0 ? \n          <div>\n          <input\n            type=\"text\"\n            placeholder=\"Playlist Name\"\n            value={this.state.playlistName}\n            onChange={this.handlePlaylistName}\n          /> \n          <button onClick={() => this.handleCreatePlaylist()}>\n          Create playlist\n          </button>\n          <button onClick={() => this.handleAddTracks()}>\n            Add tracks to playlist\n          </button>\n          </div>\n        : \"\"}\n\n        </div>\n      </div> \n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}