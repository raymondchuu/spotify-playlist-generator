{"ast":null,"code":"var _jsxFileName = \"/Users/RaymondChu/spotify-playlist-generator/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.handleSearchChange = this.handleSearchChange.bind(this); //this.handleSearchArtistId = this.handleSearchArtistId.bind(this);\n\n    this.handleSearchAlbumId = this.handleSearchAlbumId.bind(this);\n    this.randomTrack = this.randomTrack.bind(this);\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      artistId: [],\n      albumId: [],\n      tracks: [],\n      nowPlaying: {\n        name: 'Not checked',\n        image: ''\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        });\n      } else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        });\n      }\n    });\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    });\n  }\n\n  handleSearchAlbumId(artistId) {\n    artistId.map(artistId => spotifyWebApi.getArtistAlbums(artistId).then(res => {\n      console.log(res);\n    }));\n  }\n\n  randomTrack(trackArray) {\n    const ran = Math.floor(Math.random() * trackArray.length);\n    return trackArray[ran];\n  }\n\n  handleSearchArtistId() {\n    let artists = this.state.artists.split(',');\n    artists.map(artistName => spotifyWebApi.searchArtists(artistName).then(res => {\n      let artistId = res.artists.items[0].id;\n      spotifyWebApi.getArtistAlbums(artistId).then(res => {\n        for (let i = 0; i < res.items.length; ++i) {\n          this.state.albumId.push(res.items[i].id);\n        }\n      });\n    }));\n    this.state.albumId.map(albums => spotifyWebApi.getAlbumTracks(albums).then(res => {\n      for (let j = 0; j < 3; ++j) {\n        this.setState({\n          tracks: res.items[j]\n        }); //this.state.tracks.push(res.items[Math.floor(Math.random() * res.items.length)])\n      }\n    }));\n    console.log(this.state.tracks);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, \"Spotify Playlist Generator\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, \"Log into Spotify\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, \"Now playing: \", this.state.nowPlaying.name), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nowPlaying.image,\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter artists name\",\n      value: this.state.artists,\n      onChange: this.handleSearchChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleSearchArtistId(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, \"Generate Playlist\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, this.state.tracks));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/spotify-playlist-generator/src/App.js"],"names":["React","Spotify","spotifyWebApi","App","Component","constructor","props","params","getHashParams","handleSearchChange","bind","handleSearchAlbumId","randomTrack","state","loggedIn","access_token","artists","artistId","albumId","tracks","nowPlaying","name","image","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidMount","getMyCurrentPlaybackState","then","response","setState","item","album","images","url","catch","err","console","log","event","target","value","map","getArtistAlbums","res","trackArray","ran","Math","floor","random","length","handleSearchArtistId","split","artistName","searchArtists","items","id","i","push","albums","getAlbumTracks","j","render","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,aAAa,GAAG,IAAID,OAAJ,EAAtB;;AAEA,MAAME,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,UAAMC,MAAM,GAAG,KAAKC,aAAL,EAAf;AAEA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B,CAJiB,CAKjB;;AACA,SAAKC,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBD,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AAEA,SAAKG,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAEP,MAAM,CAACQ,YAAP,GAAsB,IAAtB,GAA6B,KAD5B;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKXC,MAAAA,MAAM,EAAE,EALG;AAMXC,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE,aADI;AAEVC,QAAAA,KAAK,EAAE;AAFG;AAND,KAAb;;AAYA,QAAIf,MAAM,CAACQ,YAAX,EAAyB;AACvBb,MAAAA,aAAa,CAACqB,cAAd,CAA6BhB,MAAM,CAACQ,YAApC;AACD;AACF;;AAEDP,EAAAA,aAAa,GAAG;AACd,QAAIgB,UAAU,GAAG,EAAjB;AACA,QAAIC,CAAJ;AAAA,QAAOC,CAAC,GAAG,sBAAX;AAAA,QACIC,CAAC,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,CAA/B,CADR;;AAEA,WAAQN,CAAC,GAAGC,CAAC,CAACM,IAAF,CAAOL,CAAP,CAAZ,EAAuB;AACpBH,MAAAA,UAAU,CAACC,CAAC,CAAC,CAAD,CAAF,CAAV,GAAmBQ,kBAAkB,CAACR,CAAC,CAAC,CAAD,CAAF,CAArC;AACF;;AACD,WAAOD,UAAP;AACD;;AAEDU,EAAAA,iBAAiB,GAAG;AAClBhC,IAAAA,aAAa,CAACiC,yBAAd,GACCC,IADD,CACOC,QAAD,IAAc;AAClB,WAAKC,QAAL,CAAc;AACZlB,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAEgB,QAAQ,CAACE,IAAT,CAAclB,IADV;AAEVC,UAAAA,KAAK,EAAEe,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,MAApB,CAA2B,CAA3B,EAA8BC;AAF3B;AADA,OAAd;AAMD,KARD,EAUCC,KAVD,CAUQC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,UAAI,KAAK/B,KAAL,CAAWC,QAAf,EAAyB;AACvB,aAAKwB,QAAL,CAAc;AACZlB,UAAAA,UAAU,EAAE;AACVC,YAAAA,IAAI,EAAE;AADI;AADA,SAAd;AAKD,OAND,MAQK;AACH,aAAKiB,QAAL,CAAc;AACZlB,UAAAA,UAAU,EAAE;AACVC,YAAAA,IAAI,EAAE;AADI;AADA,SAAd;AAKD;AACF,KA3BD;AA4BD;;AAEDZ,EAAAA,kBAAkB,CAACsC,KAAD,EAAQ;AACxB,SAAKT,QAAL,CAAc;AACZtB,MAAAA,OAAO,EAAE+B,KAAK,CAACC,MAAN,CAAaC;AADV,KAAd;AAGD;;AAEDtC,EAAAA,mBAAmB,CAACM,QAAD,EAAW;AAC5BA,IAAAA,QAAQ,CAACiC,GAAT,CAAajC,QAAQ,IACnBf,aAAa,CAACiD,eAAd,CAA8BlC,QAA9B,EACCmB,IADD,CACOgB,GAAD,IAAQ;AACZP,MAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACD,KAHD,CADF;AAMD;;AAEDxC,EAAAA,WAAW,CAACyC,UAAD,EAAa;AACtB,UAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,UAAU,CAACK,MAAtC,CAAZ;AACA,WAAOL,UAAU,CAACC,GAAD,CAAjB;AACD;;AAEDK,EAAAA,oBAAoB,GAAG;AACrB,QAAI3C,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAAX,CAAmB4C,KAAnB,CAAyB,GAAzB,CAAd;AAEA5C,IAAAA,OAAO,CAACkC,GAAR,CAAYW,UAAU,IACpB3D,aAAa,CAAC4D,aAAd,CAA4BD,UAA5B,EACCzB,IADD,CACOgB,GAAD,IAAS;AACb,UAAInC,QAAQ,GAAGmC,GAAG,CAACpC,OAAJ,CAAY+C,KAAZ,CAAkB,CAAlB,EAAqBC,EAApC;AACA9D,MAAAA,aAAa,CAACiD,eAAd,CAA8BlC,QAA9B,EACCmB,IADD,CACOgB,GAAD,IAAS;AACb,aAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,GAAG,CAACW,KAAJ,CAAUL,MAA9B,EAAsC,EAAEO,CAAxC,EAA2C;AACzC,eAAKpD,KAAL,CAAWK,OAAX,CAAmBgD,IAAnB,CAAwBd,GAAG,CAACW,KAAJ,CAAUE,CAAV,EAAaD,EAArC;AACD;AACF,OALD;AAMD,KATD,CADF;AAYA,SAAKnD,KAAL,CAAWK,OAAX,CAAmBgC,GAAnB,CAAuBiB,MAAM,IAC3BjE,aAAa,CAACkE,cAAd,CAA6BD,MAA7B,EACC/B,IADD,CACOgB,GAAD,IAAS;AACb,WAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,aAAK/B,QAAL,CAAc;AACZnB,UAAAA,MAAM,EAAEiC,GAAG,CAACW,KAAJ,CAAUM,CAAV;AADI,SAAd,EAD0B,CAI1B;AACD;AACF,KARD,CADF;AAWAxB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjC,KAAL,CAAWM,MAAvB;AACD;;AAEDmD,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,eAEE;AAAG,MAAA,IAAI,EAAC,uBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgB,KAAKzD,KAAL,CAAWO,UAAX,CAAsBC,IADtC,CAPF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAE,KAAKR,KAAL,CAAWO,UAAX,CAAsBE,KAAhC;AAAuC,MAAA,KAAK,EAAE;AAACiD,QAAAA,KAAK,EAAE;AAAR,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,oBAFd;AAGE,MAAA,KAAK,EAAE,KAAK1D,KAAL,CAAWG,OAHpB;AAIE,MAAA,QAAQ,EAAE,KAAKP,kBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAOE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKkD,oBAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPF,CAdF,eAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK9C,KAAL,CAAWM,MADd,CAzBF,CADF;AA+BD;;AArJ+B;;AAwJlC,eAAehB,GAAf","sourcesContent":["import React from 'react'; \nimport logo from './logo.svg';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component { \n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    //this.handleSearchArtistId = this.handleSearchArtistId.bind(this);\n    this.handleSearchAlbumId = this.handleSearchAlbumId.bind(this);\n    this.randomTrack = this.randomTrack.bind(this);\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      artistId: [],\n      albumId: [],\n      tracks: [],\n      nowPlaying: {\n        name: 'Not checked',\n        image: '',\n      },\n    }\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      })\n    })\n\n    .catch((err) => {\n      console.log(err)\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        })\n      }\n\n      else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        })\n      }\n    })\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    })\n  }\n\n  handleSearchAlbumId(artistId) {\n    artistId.map(artistId => (\n      spotifyWebApi.getArtistAlbums(artistId)\n      .then((res) =>{\n        console.log(res)\n      })\n    ))\n  }\n\n  randomTrack(trackArray) {\n    const ran = Math.floor(Math.random() * trackArray.length)\n    return trackArray[ran]\n  }\n\n  handleSearchArtistId() {\n    let artists = this.state.artists.split(',');\n\n    artists.map(artistName => (\n      spotifyWebApi.searchArtists(artistName) \n      .then((res) => {\n        let artistId = res.artists.items[0].id\n        spotifyWebApi.getArtistAlbums(artistId)\n        .then((res) => {\n          for (let i = 0; i < res.items.length; ++i) {\n            this.state.albumId.push(res.items[i].id) \n          }\n        })\n      }) \n    ))\n    this.state.albumId.map(albums => (\n      spotifyWebApi.getAlbumTracks(albums)\n      .then((res) => {\n        for (let j = 0; j < 3; ++j) {\n          this.setState({\n            tracks: res.items[j]\n          })\n          //this.state.tracks.push(res.items[Math.floor(Math.random() * res.items.length)])\n        }\n      })\n    ))\n    console.log(this.state.tracks)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Spotify Playlist Generator</h1>\n        <a href=\"http://localhost:8888\">\n          <button>\n            Log into Spotify\n          </button>\n        </a>\n        <div>\n          Now playing: {this.state.nowPlaying.name}\n        </div>\n        <div>\n          <img src={this.state.nowPlaying.image} style={{width: 100}} />\n        </div>\n        <br/>\n        <form>\n          <input \n            type=\"text\" \n            placeholder=\"Enter artists name\" \n            value={this.state.artists} \n            onChange={this.handleSearchChange}\n          />\n          <button onClick={() => this.handleSearchArtistId()}>\n            Generate Playlist\n          </button>\n        </form>\n        <div>\n          {this.state.tracks}\n        </div>\n      </div> \n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}