{"ast":null,"code":"var _jsxFileName = \"/Users/RaymondChu/spotify-playlist-generator/front-end/src/App.js\";\nimport React from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handlePlaylistName = this.handlePlaylistName.bind(this);\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      tracks: [],\n      trackuri: [],\n      playlistName: '',\n      device_id: '',\n      user_id: '',\n      nowPlaying: {\n        name: '',\n        image: ''\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMe().then(res => {\n      this.setState({\n        user_id: res.id\n      });\n    });\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    });\n  }\n\n  handleSearchArtistId() {\n    this.setState({\n      tracks: []\n    });\n    let artists = this.state.artists.split(',');\n    artists.map(artistName => spotifyWebApi.searchArtists(artistName).then(res => {\n      let artistId = res.artists.items[0].id;\n      spotifyWebApi.getArtistTopTracks(artistId, \"CA\", {\n        limit: 15\n      }).then(res => {\n        for (let i = 0; i < res.tracks.length; i++) {\n          this.setState(state => {\n            const tracks = state.tracks.concat(res.tracks[i]);\n            const trackuri = state.trackuri.concat(res.tracks[i].uri);\n            return {\n              tracks,\n              trackuri\n            };\n          });\n        }\n      });\n    }));\n  }\n\n  skipNext() {\n    spotifyWebApi.skipToNext({\n      device_id: this.state.device_id\n    }).then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState().then(res => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        });\n      });\n    });\n  }\n\n  skipPrev() {\n    spotifyWebApi.skipToPrevious({\n      device_id: this.state.device_id\n    }).then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState().then(res => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        });\n      });\n    });\n  }\n\n  handlePlaylistName(event) {\n    this.setState({\n      playlistName: event.target.value\n    });\n  }\n\n  handleCreatePlaylist() {\n    spotifyWebApi.createPlaylist(this.state.user_id, {\n      name: this.state.playlistName\n    }).then(res => {\n      spotifyWebApi.addTracksToPlaylist(this.state.user_id, res.id, this.state.trackuri);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }), this.state.loggedIn ? \"\" : /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, \"Log into Spotify\")), this.state.loggedIn ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, \"Now playing: \", this.state.nowPlaying.name), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nowPlaying.image,\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.skipPrev(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, \"Prev song\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.skipNext(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, \"Next song\"), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter artists name\",\n      value: this.state.artists,\n      onChange: this.handleSearchChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.handleSearchArtistId(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, \"Search top tracks\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, this.state.tracks.map(track => /*#__PURE__*/React.createElement(\"li\", {\n      key: track.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    }, track.name)), this.state.tracks.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Playlist Name\",\n      value: this.state.playlistName,\n      onChange: this.handlePlaylistName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleCreatePlaylist(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }\n    }, \"Create playlist\")) : \"\")) : \"\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/spotify-playlist-generator/front-end/src/App.js"],"names":["React","Navbar","Spotify","spotifyWebApi","App","Component","constructor","props","params","getHashParams","handleSearchChange","bind","handlePlaylistName","state","loggedIn","access_token","artists","tracks","trackuri","playlistName","device_id","user_id","nowPlaying","name","image","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidMount","getMe","then","res","setState","id","event","target","value","handleSearchArtistId","split","map","artistName","searchArtists","artistId","items","getArtistTopTracks","limit","i","length","concat","uri","skipNext","skipToNext","getMyCurrentPlaybackState","item","album","images","url","skipPrev","skipToPrevious","handleCreatePlaylist","createPlaylist","addTracksToPlaylist","render","width","track"],"mappings":"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","sourcesContent":["import React from 'react'; \nimport Navbar from './components/Navbar';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component { \n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handlePlaylistName = this.handlePlaylistName.bind(this);\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      tracks: [],\n      trackuri: [],\n      playlistName: '',\n      device_id: '',\n      user_id: '',\n      nowPlaying: {\n        name: '',\n        image: '',\n      },\n    }\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMe()\n    .then((res) => {\n      this.setState({\n        user_id: res.id\n      })\n    })\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    })\n  }\n\n  handleSearchArtistId() {\n    this.setState({tracks: []})\n    let artists = this.state.artists.split(',');\n    artists.map(artistName => (\n      spotifyWebApi.searchArtists(artistName) \n      .then((res) => {\n        let artistId = res.artists.items[0].id\n        spotifyWebApi.getArtistTopTracks(artistId, \"CA\", { limit: 15 })\n        .then((res) => {\n          for (let i = 0; i < res.tracks.length; i++) {\n            this.setState(state => {\n              const tracks = state.tracks.concat(res.tracks[i])\n              const trackuri = state.trackuri.concat(res.tracks[i].uri)\n              return {tracks, trackuri}\n            })\n          }\n        })\n      }) \n    ))\n  }\n\n  skipNext() {\n    spotifyWebApi.skipToNext({device_id: this.state.device_id, })\n    .then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState()\n      .then((res) => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        })\n      })\n    })\n  }\n\n  skipPrev() {\n    spotifyWebApi.skipToPrevious({device_id: this.state.device_id, })\n    .then(() => {\n      spotifyWebApi.getMyCurrentPlaybackState()\n      .then((res) => {\n        this.setState({\n          nowPlaying: {\n            name: res.item.name,\n            image: res.item.album.images[0].url\n          }\n        })\n      })\n    })\n  }\n\n  handlePlaylistName(event) {\n    this.setState({\n      playlistName: event.target.value\n    })\n  }\n\n  handleCreatePlaylist() {\n    spotifyWebApi.createPlaylist(this.state.user_id, {name: this.state.playlistName})\n    .then((res) => {\n      spotifyWebApi.addTracksToPlaylist(this.state.user_id, res.id, this.state.trackuri)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Navbar />\n\n        {this.state.loggedIn ? \"\" : \n        <a href=\"http://localhost:8888\">\n          <button>\n            Log into Spotify\n          </button>\n        </a>\n        }\n        {this.state.loggedIn ? \n\n        <div>\n          <div>\n            Now playing: {this.state.nowPlaying.name}\n          </div>\n          <div>\n            <img src={this.state.nowPlaying.image} style={{width: 100}} />\n          </div>\n          <br/>\n          <button onClick={() => this.skipPrev()}>\n            Prev song\n          </button>\n          <button onClick={() => this.skipNext()}>\n            Next song\n          </button>\n          <form>\n            <input \n              type=\"text\" \n              placeholder=\"Enter artists name\" \n              value={this.state.artists} \n              onChange={this.handleSearchChange}\n            />\n            <button type=\"button\" onClick={() => this.handleSearchArtistId()}>\n              Search top tracks\n            </button>\n          </form>\n\n          <div>\n            {this.state.tracks.map(track => (\n              <li key={track.id}>{track.name}</li>\n            ))}\n            { this.state.tracks.length > 0 ? \n            <div>\n              <input\n                type=\"text\"\n                placeholder=\"Playlist Name\"\n                value={this.state.playlistName}\n                onChange={this.handlePlaylistName}\n              /> \n              <button onClick={() => this.handleCreatePlaylist()}>\n              Create playlist\n              </button>\n            </div>\n          : \"\"}\n          </div>\n        </div> : \"\"}\n      </div> \n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}