{"ast":null,"code":"var _jsxFileName = \"/Users/RaymondChu/spotify-playlist-generator/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSearchArtistId = this.handleSearchArtistId.bind(this);\n    this.handleSearchAlbumId = this.handleSearchAlbumId.bind(this);\n    this.randomTrack = this.randomTrack.bind(this);\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      album: [],\n      tracks: [],\n      nowPlaying: {\n        name: 'Not checked',\n        image: ''\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        });\n      } else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        });\n      }\n    });\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    });\n  }\n\n  handleSearchAlbumId(artistId) {\n    artistId.map(artistId => spotifyWebApi.getArtistAlbums(artistId).then(res => {\n      console.log(res);\n    }));\n  }\n\n  randomTrack(trackArray) {\n    const ran = Math.floor(Math.random() * trackArray.length);\n    return trackArray[ran];\n  }\n\n  handleSearchArtistId() {\n    let artists = this.state.artists.split(',');\n    artists.map(artistName => spotifyWebApi.searchArtists(artistName).then(res => {\n      let artistId = res.artists.items[0].id;\n      spotifyWebApi.getArtistAlbums(artistId).then(res => {\n        for (let i = 0; i < res.items.length; ++i) {\n          this.state.album.push(res.items[i].id);\n        } //console.log(this.state.album)\n\n      });\n      console.log(this.state.album);\n      this.state.album.map(albumId => spotifyWebApi.getAlbumTracks(albumId).then(res => {\n        console.log(res.items);\n\n        for (let j = 0; j < res.items.length; ++j) {\n          this.state.tracks.push(res.items[j]);\n        }\n      }));\n      const randomTracks = [];\n      const ran = Math.floor(Math.random() * this.state.tracks.length);\n\n      for (let k = 0; k < 30; ++k) {\n        randomTracks.push(this.state.tracks[k]);\n      }\n\n      console.log(randomTracks);\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, \"Spotify Playlist Generator\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, \"Log into Spotify\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, \"Now playing: \", this.state.nowPlaying.name), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nowPlaying.image,\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter artists name\",\n      value: this.state.artists,\n      onChange: this.handleSearchChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleSearchArtistId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, \"Generate Playlist\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/spotify-playlist-generator/src/App.js"],"names":["React","Spotify","spotifyWebApi","App","Component","constructor","props","params","getHashParams","handleSearchChange","bind","handleSearchArtistId","handleSearchAlbumId","randomTrack","state","loggedIn","access_token","artists","album","tracks","nowPlaying","name","image","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidMount","getMyCurrentPlaybackState","then","response","setState","item","images","url","catch","err","console","log","event","target","value","artistId","map","getArtistAlbums","res","trackArray","ran","Math","floor","random","length","split","artistName","searchArtists","items","id","i","push","albumId","getAlbumTracks","j","randomTracks","k","render","width"],"mappings":"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","sourcesContent":["import React from 'react'; \nimport logo from './logo.svg';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component { \n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSearchArtistId = this.handleSearchArtistId.bind(this);\n    this.handleSearchAlbumId = this.handleSearchAlbumId.bind(this);\n    this.randomTrack = this.randomTrack.bind(this);\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      album: [],\n      tracks: [],\n      nowPlaying: {\n        name: 'Not checked',\n        image: '',\n      },\n    }\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      })\n    })\n    .catch((err) => {\n      console.log(err)\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        })\n      }\n\n      else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        })\n      }\n    })\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    })\n  }\n\n  handleSearchAlbumId(artistId) {\n    artistId.map(artistId => (\n      spotifyWebApi.getArtistAlbums(artistId)\n      .then((res) => {\n        console.log(res)\n      })\n    ))\n  }\n\n  randomTrack(trackArray) {\n    const ran = Math.floor(Math.random() * trackArray.length)\n    return trackArray[ran]\n  }\n\n  handleSearchArtistId() {\n    let artists = this.state.artists.split(',');\n    artists.map(artistName => (\n      spotifyWebApi.searchArtists(artistName) \n      .then((res) => {\n        let artistId = res.artists.items[0].id\n        spotifyWebApi.getArtistAlbums(artistId)\n        .then((res) => {\n          for (let i = 0; i < res.items.length; ++i) {\n            this.state.album.push(res.items[i].id)\n          }\n          //console.log(this.state.album)\n        })\n        console.log(this.state.album)\n         this.state.album.map(albumId => (\n          spotifyWebApi.getAlbumTracks(albumId)\n          .then((res) => {\n            console.log(res.items)\n            for (let j = 0; j < res.items.length; ++j) {\n              this.state.tracks.push(res.items[j])\n            }\n          })\n        ))\n        const randomTracks = [];\n        const ran = Math.floor(Math.random() * this.state.tracks.length)\n        for (let k = 0; k < 30; ++k) {\n          randomTracks.push(this.state.tracks[k])\n        }\n        console.log(randomTracks)\n      })\n    ));\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Spotify Playlist Generator</h1>\n        <a href=\"http://localhost:8888\">\n          <button>\n            Log into Spotify\n          </button>\n        </a>\n        <div>\n          Now playing: {this.state.nowPlaying.name}\n        </div>\n        <div>\n          <img src={this.state.nowPlaying.image} style={{width: 100}} />\n        </div>\n        <br/>\n        <form>\n          <input \n            type=\"text\" \n            placeholder=\"Enter artists name\" \n            value={this.state.artists} \n            onChange={this.handleSearchChange}\n          />\n          <button onClick={this.handleSearchArtistId}>\n            Generate Playlist\n          </button>\n\n        </form>\n      </div> \n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}