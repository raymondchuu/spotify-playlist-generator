{"ast":null,"code":"var _jsxFileName = \"/Users/RaymondChu/spotify-playlist-generator/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      artistId: [],\n      nowPlaying: {\n        name: 'Not checked',\n        image: ''\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        });\n      } else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        });\n      }\n    });\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    });\n  }\n\n  handleSearch() {\n    let Artists = this.state.artists.split(',');\n    let search = Artists.map(artistName => spotifyWebApi.searchArtists(artistName).then(res => {\n      let results = res.artists.items[0].id;\n      this.state.artistId.push(results);\n    }));\n    console.log(this.state.artistId);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"Spotify Playlist Generator\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"Log into Spotify\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \"Now playing: \", this.state.nowPlaying.name), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nowPlaying.image,\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter artists name\",\n      value: this.state.artists,\n      onChange: this.handleSearchChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, \"Search\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/RaymondChu/spotify-playlist-generator/src/App.js"],"names":["React","Spotify","spotifyWebApi","App","Component","constructor","props","params","getHashParams","handleSearchChange","bind","handleSearch","state","loggedIn","access_token","artists","artistId","nowPlaying","name","image","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidMount","getMyCurrentPlaybackState","then","response","setState","item","album","images","url","catch","err","console","log","event","target","value","Artists","split","search","map","artistName","searchArtists","res","results","items","id","push","render","width"],"mappings":"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","sourcesContent":["import React from 'react'; \nimport logo from './logo.svg';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebApi = new Spotify();\n\nclass App extends React.Component { \n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      artists: '',\n      artistId: [],\n      nowPlaying: {\n        name: 'Not checked',\n        image: '',\n      },\n    }\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  componentDidMount() {\n    spotifyWebApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      })\n    })\n    .catch((err) => {\n      console.log(err)\n      if (this.state.loggedIn) {\n        this.setState({\n          nowPlaying: {\n            name: 'Please log in!'\n          }\n        })\n      }\n\n      else {\n        this.setState({\n          nowPlaying: {\n            name: 'Currently not playing anything'\n          }\n        })\n      }\n    })\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      artists: event.target.value\n    })\n  }\n\n  handleSearch() {\n    let Artists = this.state.artists.split(',');\n    let search = Artists.map(artistName => (\n      spotifyWebApi.searchArtists(artistName)\n      .then((res) => {\n        let results = res.artists.items[0].id\n        this.state.artistId.push(results)\n      })\n    ));\n    console.log(this.state.artistId)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Spotify Playlist Generator</h1>\n        <a href=\"http://localhost:8888\">\n          <button>\n            Log into Spotify\n          </button>\n        </a>\n        <div>\n          Now playing: {this.state.nowPlaying.name}\n        </div>\n        <div>\n          <img src={this.state.nowPlaying.image} style={{width: 100}} />\n        </div>\n        <br/>\n        <form>\n          <input type=\"text\" placeholder=\"Enter artists name\" value={this.state.artists} onChange={this.handleSearchChange}/>\n          <button onClick={this.handleSearch}>\n            Search\n          </button>\n        </form>\n      </div> \n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}